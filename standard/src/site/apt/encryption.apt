 ---
 Encryption

Introduction

 B1 archive encryption is used to provide confidentiality, integrity and authenticity of an archive.
The B1 archive format supports password-based AES-256 encryption in GCM mode.

Restrictions

 An archive is encrypted if each volume has a head item "e:1/<iteration count>", where
the iteration count is choosen to be quite large to increase the difficulty of a brute-force attack.

 The encryption adds the following restrictions to the archive structure:

 * The head item "a:" (archive identifier) must contain a base64-encoded 256-bit value,
   generated with a cryptographically secure pseudo-random number generator;

 * Both head an tail must have an item "x:<base64>" with the original head/tail encrypted;

 * The head items "t:" and ":m" and the tail item "c:" can only be present in encrypted form in item "x:";

 * Only blocks of type "AesBlock" are allowed.

Implementation

 The following steps should be performed for encryption:

 * A 256-bit archive salt is obtained by base64-decoding the archive identifier;

 * An iteration count is taken from the head item "e:1/<iteration count>";

 * An archive key is generated using PBKDF2 from PKCS #5 with HMAC-SHA256 as follows:

---
   archiveKey = PBKDF2(HMAC-SHA256, UTF8(userPassword), archiveSalt, iterationCount, 256);
---

 * A volume salt is obtained by UTF-8 encoding a decimal representation of the volume number from the head item "n:";

---
   volumeSalt = UTF8(volumeNumber);
---

 * A volume key is generated by HMAC-SHA256 from the archive key and the volume salt as follows:

---
   volumeKey = HMAC-SHA256(archiveKey, volumeSalt);
---

 * The head and tail salts are single bytes, 0x01 and 0x02 respectively;

 * The block salt is a UTF-8 encoded decimal representation of the block offset from the beginning of a volume;

---
   blockSalt = UTF8(blockOffset);
---

 * Head, tail, and block keys are obtained as followes:

---
   headKey = HMAC-SHA256(volumeKey, headSalt),
   tailKey = HMAC-SHA256(volumeKey, tailSalt),
   blockKey = HMAC-SHA256(volumeKey, blockSalt);
---

 * The UTF-8 representation of the head of each volume must be encrypted with the head key, base64 encoded,
   appended to "x:" and stored as an additional head item:

---
    "x:" + BASE64(AES-256-GCM(headKey, UTF8(headItems)));
---

 * The UTF-8 representation of the tail of each volume must be encrypted with the tail key, base64 encoded,
   appended to "x:" and stored as an additional tail item:

---
    "x:" + BASE64(AES-256-GCM(tailKey, UTF8(tailItems)));
---

 * Each "Block" is replaced with another "Block" containing "AesBlock" with the encrypted binary represendation
   of the original block:

---
    encryptedBlock = AES-256-GCM(blockKey, block);
---

 * The head items "t:" and "m:" and the tail item "c:" must be removed from the plaintext head/tail because
   they are not required for decryption and can be obtained after decrypting the "x:" items;

 * When performing AES-256 encryption in GCM mode the initialization vector consists of 96 zero bits,
   the additional authenticated data parameter is empty, and the generated 128-bit tag (MAC) is appended
   to the end of the encrypted message.
